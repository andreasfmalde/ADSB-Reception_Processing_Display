// Code generated by MockGen. DO NOT EDIT.
// Source: .\backend\internal\db\database.go

// Package db is a generated GoMock package.
package db

import (
	global "adsb-api/internal/global"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// BulkInsertCurrentTimeAircraftTable mocks base method.
func (m *MockDatabase) BulkInsertCurrentTimeAircraftTable(aircraft []global.Aircraft) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkInsertCurrentTimeAircraftTable", aircraft)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkInsertCurrentTimeAircraftTable indicates an expected call of BulkInsertCurrentTimeAircraftTable.
func (mr *MockDatabaseMockRecorder) BulkInsertCurrentTimeAircraftTable(aircraft interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkInsertCurrentTimeAircraftTable", reflect.TypeOf((*MockDatabase)(nil).BulkInsertCurrentTimeAircraftTable), aircraft)
}

// Close mocks base method.
func (m *MockDatabase) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDatabaseMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabase)(nil).Close))
}

// CreateCurrentTimeAircraftTable mocks base method.
func (m *MockDatabase) CreateCurrentTimeAircraftTable() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createCurrentTimeAircraftTable")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCurrentTimeAircraftTable indicates an expected call of CreateCurrentTimeAircraftTable.
func (mr *MockDatabaseMockRecorder) CreateCurrentTimeAircraftTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createCurrentTimeAircraftTable", reflect.TypeOf((*MockDatabase)(nil).CreateCurrentTimeAircraftTable))
}

// DeleteOldCurrentAircraft mocks base method.
func (m *MockDatabase) DeleteOldCurrentAircraft() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOldCurrentAircraft")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOldCurrentAircraft indicates an expected call of DeleteOldCurrentAircraft.
func (mr *MockDatabaseMockRecorder) DeleteOldCurrentAircraft() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOldCurrentAircraft", reflect.TypeOf((*MockDatabase)(nil).DeleteOldCurrentAircraft))
}

// GetAllCurrentAircraft mocks base method.
func (m *MockDatabase) GetAllCurrentAircraft() (global.GeoJsonFeatureCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCurrentAircraft")
	ret0, _ := ret[0].(global.GeoJsonFeatureCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCurrentAircraft indicates an expected call of GetAllCurrentAircraft.
func (mr *MockDatabaseMockRecorder) GetAllCurrentAircraft() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCurrentAircraft", reflect.TypeOf((*MockDatabase)(nil).GetAllCurrentAircraft))
}

// InitDB mocks base method.
func (m *MockDatabase) InitDB() (*AdsbDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitDB")
	ret0, _ := ret[0].(*AdsbDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitDB indicates an expected call of InitDB.
func (mr *MockDatabaseMockRecorder) InitDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitDB", reflect.TypeOf((*MockDatabase)(nil).InitDB))
}
