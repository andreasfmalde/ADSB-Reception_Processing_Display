// Code generated by MockGen. DO NOT EDIT.
// Source: .\backend\internal\db\database.go

// Package db is a generated GoMock package.
package db

import (
	global "adsb-api/internal/global"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// AddHistoryFromCurrent mocks base method.
func (m *MockDatabase) AddHistoryFromCurrent() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHistoryFromCurrent")
	ret0, _ := ret[0].(error)
	return ret0
}

// AddHistoryFromCurrent indicates an expected call of AddHistoryFromCurrent.
func (mr *MockDatabaseMockRecorder) AddHistoryFromCurrent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHistoryFromCurrent", reflect.TypeOf((*MockDatabase)(nil).AddHistoryFromCurrent))
}

// BulkInsertCurrentTimeAircraftTable mocks base method.
func (m *MockDatabase) BulkInsertCurrentTimeAircraftTable(aircraft []global.AircraftCurrentModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkInsertCurrentTimeAircraftTable", aircraft)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkInsertCurrentTimeAircraftTable indicates an expected call of BulkInsertCurrentTimeAircraftTable.
func (mr *MockDatabaseMockRecorder) BulkInsertCurrentTimeAircraftTable(aircraft interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkInsertCurrentTimeAircraftTable", reflect.TypeOf((*MockDatabase)(nil).BulkInsertCurrentTimeAircraftTable), aircraft)
}

// Close mocks base method.
func (m *MockDatabase) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDatabaseMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabase)(nil).Close))
}

// CreateAdsbTables mocks base method.
func (m *MockDatabase) CreateAdsbTables() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdsbTables")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAdsbTables indicates an expected call of CreateAdsbTables.
func (mr *MockDatabaseMockRecorder) CreateAdsbTables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdsbTables", reflect.TypeOf((*MockDatabase)(nil).CreateAdsbTables))
}

// DeleteOldCurrentAircraft mocks base method.
func (m *MockDatabase) DeleteOldCurrentAircraft() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOldCurrentAircraft")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOldCurrentAircraft indicates an expected call of DeleteOldCurrentAircraft.
func (mr *MockDatabaseMockRecorder) DeleteOldCurrentAircraft() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOldCurrentAircraft", reflect.TypeOf((*MockDatabase)(nil).DeleteOldCurrentAircraft))
}

// GetAllCurrentAircraft mocks base method.
func (m *MockDatabase) GetAllCurrentAircraft() ([]global.AircraftCurrentModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCurrentAircraft")
	ret0, _ := ret[0].([]global.AircraftCurrentModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCurrentAircraft indicates an expected call of GetAllCurrentAircraft.
func (mr *MockDatabaseMockRecorder) GetAllCurrentAircraft() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCurrentAircraft", reflect.TypeOf((*MockDatabase)(nil).GetAllCurrentAircraft))
}

// GetHistoryByIcao mocks base method.
func (m *MockDatabase) GetHistoryByIcao(search string) ([]global.AircraftHistoryModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryByIcao", search)
	ret0, _ := ret[0].([]global.AircraftHistoryModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoryByIcao indicates an expected call of GetHistoryByIcao.
func (mr *MockDatabaseMockRecorder) GetHistoryByIcao(search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryByIcao", reflect.TypeOf((*MockDatabase)(nil).GetHistoryByIcao), search)
}
