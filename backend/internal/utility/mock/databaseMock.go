// Code generated by MockGen. DO NOT EDIT.
// Source: .\internal\db\database.go

// Package db is a generated GoMock package.
package mock

import (
	models "adsb-api/internal/global/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockDatabase) BeginTx() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx")
	ret0, _ := ret[0].(error)
	return ret0
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockDatabaseMockRecorder) BeginTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockDatabase)(nil).BeginTx))
}

// BulkInsertAircraftCurrent mocks base method.
func (m *MockDatabase) BulkInsertAircraftCurrent(aircraft []models.AircraftCurrentModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkInsertAircraftCurrent", aircraft)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkInsertAircraftCurrent indicates an expected call of BulkInsertAircraftCurrent.
func (mr *MockDatabaseMockRecorder) BulkInsertAircraftCurrent(aircraft interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkInsertAircraftCurrent", reflect.TypeOf((*MockDatabase)(nil).BulkInsertAircraftCurrent), aircraft)
}

// Close mocks base method.
func (m *MockDatabase) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDatabaseMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabase)(nil).Close))
}

// Commit mocks base method.
func (m *MockDatabase) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockDatabaseMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockDatabase)(nil).Commit))
}

// CreateAircraftCurrentTable mocks base method.
func (m *MockDatabase) CreateAircraftCurrentTable() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAircraftCurrentTable")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAircraftCurrentTable indicates an expected call of CreateAircraftCurrentTable.
func (mr *MockDatabaseMockRecorder) CreateAircraftCurrentTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAircraftCurrentTable", reflect.TypeOf((*MockDatabase)(nil).CreateAircraftCurrentTable))
}

// CreateAircraftCurrentTimestampIndex mocks base method.
func (m *MockDatabase) CreateAircraftCurrentTimestampIndex() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAircraftCurrentTimestampIndex")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAircraftCurrentTimestampIndex indicates an expected call of CreateAircraftCurrentTimestampIndex.
func (mr *MockDatabaseMockRecorder) CreateAircraftCurrentTimestampIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAircraftCurrentTimestampIndex", reflect.TypeOf((*MockDatabase)(nil).CreateAircraftCurrentTimestampIndex))
}

// CreateAircraftHistory mocks base method.
func (m *MockDatabase) CreateAircraftHistory() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAircraftHistory")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAircraftHistory indicates an expected call of CreateAircraftHistory.
func (mr *MockDatabaseMockRecorder) CreateAircraftHistory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAircraftHistory", reflect.TypeOf((*MockDatabase)(nil).CreateAircraftHistory))
}

// DeleteOldCurrent mocks base method.
func (m *MockDatabase) DeleteOldCurrent() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOldCurrent")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOldCurrent indicates an expected call of DeleteOldCurrent.
func (mr *MockDatabaseMockRecorder) DeleteOldCurrent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOldCurrent", reflect.TypeOf((*MockDatabase)(nil).DeleteOldCurrent))
}

// DropAircraftCurrentTable mocks base method.
func (m *MockDatabase) DropAircraftCurrentTable() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropAircraftCurrentTable")
	ret0, _ := ret[0].(error)
	return ret0
}

// DropAircraftCurrentTable indicates an expected call of DropAircraftCurrentTable.
func (mr *MockDatabaseMockRecorder) DropAircraftCurrentTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropAircraftCurrentTable", reflect.TypeOf((*MockDatabase)(nil).DropAircraftCurrentTable))
}

// GetCurrentAircraft mocks base method.
func (m *MockDatabase) SelectAllColumnsAircraftCurrent() ([]models.AircraftCurrentModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllColumnsAircraftCurrent")
	ret0, _ := ret[0].([]models.AircraftCurrentModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentAircraft indicates an expected call of GetCurrentAircraft.
func (mr *MockDatabaseMockRecorder) GetCurrentAircraft() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllColumnsAircraftCurrent", reflect.TypeOf((*MockDatabase)(nil).SelectAllColumnsAircraftCurrent))
}

// InsertHistoryFromCurrent mocks base method.
func (m *MockDatabase) InsertHistoryFromCurrent() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertHistoryFromCurrent")
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertHistoryFromCurrent indicates an expected call of InsertHistoryFromCurrent.
func (mr *MockDatabaseMockRecorder) InsertHistoryFromCurrent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertHistoryFromCurrent", reflect.TypeOf((*MockDatabase)(nil).InsertHistoryFromCurrent))
}

// Rollback mocks base method.
func (m *MockDatabase) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockDatabaseMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockDatabase)(nil).Rollback))
}

// SelectAllColumnHistoryByIcao mocks base method.
func (m *MockDatabase) SelectAllColumnHistoryByIcao(search string) ([]models.AircraftHistoryModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllColumnHistoryByIcao", search)
	ret0, _ := ret[0].([]models.AircraftHistoryModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllColumnHistoryByIcao indicates an expected call of SelectAllColumnHistoryByIcao.
func (mr *MockDatabaseMockRecorder) SelectAllColumnHistoryByIcao(search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllColumnHistoryByIcao", reflect.TypeOf((*MockDatabase)(nil).SelectAllColumnHistoryByIcao), search)
}
