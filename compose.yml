version: '3.8'
services:
  postgres_database:
    image: postgres:latest
    container_name: postgres_container
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - '1234:5432'
    volumes:
      - ./pg_data:/var/lib/postgresql/data
    networks:
      - fullstack
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${DB_USER} -d ${DB_NAME}'"]
      timeout: 5s
      interval: 5s
      retries: 5
      start_period: 10s

  reception_api:
    container_name: reception_api_container
    build:
      context: ./backend
      dockerfile: DockerfileReception
    environment:
      - DB_HOST=postgres_database
      - DB_PORT=5432
    restart: 'unless-stopped'
    depends_on:
      postgres_database:
        condition: service_healthy
    networks:
      - fullstack
    volumes:
      - ./.env:/app/.env

  rest_api:
    container_name: rest_api_container
    build:
      context: ./backend
      dockerfile: DockerfileRest
    environment:
      - DB_HOST=postgres_database
      - DB_PORT=5432
    restart: 'unless-stopped'
    ports:
      - '8080:8080'
    depends_on:
      postgres_database:
        condition: service_healthy
    networks:
      - fullstack
    volumes:
      - ./.env:/app/.env
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/" ]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s

  frontend:
    container_name: frontend_container
    build: ./frontend/
    restart: 'unless-stopped'
    ports:
      - '80:3000'
    depends_on:
      rest_api:
        condition: service_healthy
    networks:
      - fullstack

volumes:
  pg_data:

networks:
  fullstack:
    driver: bridge